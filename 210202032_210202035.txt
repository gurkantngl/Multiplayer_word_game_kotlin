package com.gurkantngl.wordgame.ui

import android.content.Intent
import android.os.Bundle
import android.widget.LinearLayout
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.ValueEventListener
import com.google.firebase.database.ktx.database
import com.google.firebase.ktx.Firebase
import com.gurkantngl.wordgame.R
import com.gurkantngl.wordgame.databinding.ActivityCharNumberBinding

class CharNumberActivity : AppCompatActivity() {

    private lateinit var binding : ActivityCharNumberBinding
    private val db = Firebase.database.reference

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityCharNumberBinding.inflate(layoutInflater)
        enableEdgeToEdge()
        setContentView(binding.root)
        initUI()

        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }
    }



    private fun initUI () {
        val username = intent.getStringExtra("username")
        val mod = intent.getIntExtra("mod", 0)
       binding.btnNumber4.setOnClickListener {
           join_room(4)
           val intent = Intent(this, PlayersInRoomActivity::class.java)
           intent.putExtra("mod", mod)
           intent.putExtra("username", username)
           intent.putExtra("roomNumber", 4)
           startActivity(intent)

       }
        binding.btnNumber5.setOnClickListener {
            join_room(5)
            val intent = Intent(this, PlayersInRoomActivity::class.java)
            intent.putExtra("mod", mod)
            intent.putExtra("username", username)
            intent.putExtra("roomNumber", 5)
            startActivity(intent)
       }
        binding.btnNumber6.setOnClickListener {
            Toast.makeText(this, "mod: $mod, kelime: 6", Toast.LENGTH_SHORT).show()
            join_room(6)
            val intent = Intent(this, PlayersInRoomActivity::class.java)
            intent.putExtra("mod", mod)
            intent.putExtra("username", username)
            intent.putExtra("roomNumber", 6)
            startActivity(intent)
        }
        binding.btnNumber7.setOnClickListener {
            join_room(7)
            val intent = Intent(this, PlayersInRoomActivity::class.java)
            intent.putExtra("mod", mod)
            intent.putExtra("username", username)
            intent.putExtra("roomNumber", 7)
            startActivity(intent)
        }
    }

    private fun join_room(roomNumber : Int) {
        val username = intent.getStringExtra("username")
        val mod = intent.getIntExtra("mod", 0)

        var roomList = listOf(
            "mod_1_rooms",
            "mod_2_rooms",
        )

        val users = ArrayList<String>()
        db.child(roomList[mod-1]).child(roomNumber.toString()).child(username!!).setValue(hashMapOf("is_playing" to false))
    }

}
package com.gurkantngl.wordgame.ui

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.os.CountDownTimer
import android.text.Editable
import android.text.InputFilter
import android.text.InputType
import android.text.TextWatcher
import android.view.View
import android.view.inputmethod.InputMethodManager
import android.widget.EditText
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.ValueEventListener
import com.google.firebase.database.ktx.database
import com.google.firebase.ktx.Firebase
import com.gurkantngl.wordgame.R
import com.gurkantngl.wordgame.databinding.ActivityChooseWordsFiveBinding
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.net.URL

class ChooseWordsFiveActivity : AppCompatActivity() {

    private  lateinit var binding : ActivityChooseWordsFiveBinding
    private val db = Firebase.database.reference
    private lateinit var timer: CountDownTimer
    private lateinit var gameListener: ValueEventListener

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityChooseWordsFiveBinding.inflate(layoutInflater)
        enableEdgeToEdge()
        setContentView(binding.root)
        initUI()
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        leave_room()
        timer.cancel()
        db.child("games").removeEventListener(gameListener)
    }

    override fun onPause() {
        super.onPause()
        leave_room()
    }

    override fun onResume() {
        super.onResume()
        val username = intent.getStringExtra("username")
        val mod = intent.getIntExtra("mod", 0)
        var roomList = listOf(
            "mod_1_rooms",
            "mod_2_rooms",
        )
        val users = ArrayList<String>()
        db.child(roomList[mod-1]).child("5").addListenerForSingleValueEvent(object :
            ValueEventListener {
            override fun onDataChange(dataSnapshot: DataSnapshot) {
                for (snapshot in dataSnapshot.children) {
                    val user = snapshot.key
                    if (user != username) {
                        users.add(user!!)
                    }
                }
                val usersString = users.joinToString(", ")

                Toast.makeText(this@ChooseWordsFiveActivity, usersString, Toast.LENGTH_SHORT).show()
            }
            override fun onCancelled(error: DatabaseError) {
                TODO("Not yet implemented")
            }

        })
        db.child(roomList[mod-1]).child("5").child(username!!).setValue(hashMapOf("is_playing" to false))
    }

    private fun leave_room() {
        val mod = intent.getIntExtra("mod", 0)
        val username = intent.getStringExtra("username")
        val roomList = listOf(
            "mod_1_rooms",
            "mod_2_rooms",
        )

        db.child(roomList[mod-1]).child("5").child(username!!).removeValue()
    }

    private fun initUI() {
        val username = intent.getStringExtra("username")
        binding.txtUsername.text = username
        binding.txtUsername.text = username
        val request_to = intent.getStringExtra("request_to")
        val request_from = intent.getStringExtra("request_from")
        val mod = intent.getIntExtra("mod", 0)
         var textList = listOf(
                binding.et1,
                binding.et2,
                binding.et3,
                binding.et4,
                binding.et5
         )

        for (i in 0 until textList.size) {
            textList[i].filters = arrayOf<InputFilter>(InputFilter.LengthFilter(1))
        }

        for(i in 0 until textList.size) {
            textList[i].inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS
            textList[i].addTextChangedListener(object : TextWatcher {
                override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {
                    // Do nothing
                }

                override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {
                    // Do nothing
                }

                override fun afterTextChanged(s: Editable?) {
                    val text = s.toString()
                    if (text != text.toUpperCase()) {
                        textList[i].setText(text.toUpperCase())
                        textList[i].setSelection(text.length) // Reset cursor position
                    }
                    s?.let  {
                        if (it.length == 1 && i < textList.size - 1) {
                            textList[i+1].requestFocus()
                        } else if (it.length == 0 && i > 0) {
                            textList[i-1].requestFocus()
                        } else {
                            // Do nothing
                        }
                    }
                }
            })
        }

        binding.btnConfirm.setOnClickListener{
            var word = ""
            for(editText in textList) {
                word += editText.text.toString()
            }


            db.child("games").addValueEventListener(object : ValueEventListener {
                override fun onDataChange(dataSnapshot: DataSnapshot) {
                    for (snapshot in dataSnapshot.children) {
                        val user_1_word = snapshot.child("user_1_word").value.toString()
                        val user_2_word = snapshot.child("user_2_word").value.toString()
                        if (user_1_word.length > 0 && user_2_word.length > 0) {
                            val intent = Intent(this@ChooseWordsFiveActivity, FiveGameActivity::class.java)
                            intent.putExtra("username", username)
                            intent.putExtra("mod", mod)
                            intent.putExtra("request_to", request_to)
                            intent.putExtra("request_from", request_from)
                            startActivity(intent)
                            finish()
                        }
                    }
                }

                override fun onCancelled(databaseError: DatabaseError) {
                    // Hata durumunda yapılacak işlemler
                }
            })

            GlobalScope.launch(Dispatchers.IO) {
                val url = "https://sozluk.gov.tr/gts_id?id=" + word
                val bodyText = URL(url).readText()
                withContext(Dispatchers.Main) {
                    if (bodyText == """{"error":"Sonuç bulunamadı"}""") {
                        Toast.makeText(this@ChooseWordsFiveActivity, "$word geçerli bir kelime değil!!!", Toast.LENGTH_SHORT).show()
                    } else {
                        db.child("games").addListenerForSingleValueEvent(object : ValueEventListener {
                            override fun onDataChange(dataSnapshot: DataSnapshot) {
                                for (snapshot in dataSnapshot.children) {
                                    val user_1 = snapshot.child("user_1").value.toString()
                                    val user_1_word = snapshot.child("user_1_word").value.toString()
                                    val user_2_word = snapshot.child("user_2_word").value.toString()
                                    if (user_1 == username) {
                                        db.child("games").child(snapshot.key!!).child("user_1_word").setValue(word)
                                    } else {
                                        db.child("games").child(snapshot.key!!).child("user_2_word").setValue(word)
                                    }

                                }
                            }

                            override fun onCancelled(error: DatabaseError) {
                                TODO("Not yet implemented")
                            }
                        })

                        binding.txtInfo.visibility = View.INVISIBLE
                        binding.et1.visibility = View.INVISIBLE
                        binding.et2.visibility = View.INVISIBLE
                        binding.et3.visibility = View.INVISIBLE
                        binding.et4.visibility = View.INVISIBLE
                        binding.et5.visibility = View.INVISIBLE
                        binding.btnConfirm.visibility = View.INVISIBLE
                        binding.txtWait5.visibility = View.VISIBLE
                    }
                }
            }
        }
        timer = object: CountDownTimer(60000, 1000) {
            override fun onTick(millisUntilFinished: Long) {
                val secondsRemaining = millisUntilFinished / 1000
                binding.etKronometre5.setText(secondsRemaining.toString())
            }

            override fun onFinish() {

                gameListener = db.child("games").addValueEventListener(object : ValueEventListener {
                    override fun onDataChange(dataSnapshot: DataSnapshot) {
                        for (snapshot in dataSnapshot.children) {
                            val user_1 = snapshot.child("user_1").value.toString()
                            val user_2 = snapshot.child("user_2").value.toString()
                            val user_1_word = snapshot.child("user_1_word").value.toString()
                            val user_2_word = snapshot.child("user_2_word").value.toString()

                            if(user_1_word.length == 0 && user_2_word.length > 0) {
                                val intent = Intent(this@ChooseWordsFiveActivity, Winner1Activity::class.java)
                                intent.putExtra("username", username)
                                intent.putExtra("winner", user_2)
                                startActivity(intent)
                                finish()
                            }else if (user_2_word.length == 0 && user_1_word.length > 0) {
                                val intent = Intent(this@ChooseWordsFiveActivity, Winner1Activity::class.java)
                                intent.putExtra("username", username)
                                intent.putExtra("winner", user_1)
                                startActivity(intent)
                                finish()
                            }else {
                                binding.etKronometre5.setText("0")
                                val intent =
                                    Intent(this@ChooseWordsFiveActivity, ChooseWordsFiveActivity::class.java)
                                intent.putExtra("username", username)
                                intent.putExtra("mod", mod)
                                intent.putExtra("request_to", request_to)
                                intent.putExtra("request_from", request_from)
                                timer.cancel()
                                startActivity(intent)
                                finish()
                            }
                        }

                    }

                    override fun onCancelled(error: DatabaseError) {
                        TODO("Not yet implemented")
                    }
                })
            }
        }
        timer.start()
    }
}
package com.gurkantngl.wordgame.ui

import android.content.Intent
import android.os.Bundle
import android.os.CountDownTimer
import android.text.Editable
import android.text.InputFilter
import android.text.InputType
import android.text.TextWatcher
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.ValueEventListener
import com.google.firebase.database.ktx.database
import com.google.firebase.ktx.Firebase
import com.gurkantngl.wordgame.R
import com.gurkantngl.wordgame.databinding.ActivityChooseWordsFourBinding
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.net.URL

class ChooseWordsFourActivity : AppCompatActivity() {

    private lateinit var binding : ActivityChooseWordsFourBinding
    private val db = Firebase.database.reference
    private lateinit var timer: CountDownTimer
    private lateinit var gameListener: ValueEventListener

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityChooseWordsFourBinding.inflate(layoutInflater)
        enableEdgeToEdge()
        setContentView(binding.root)
        initUI()
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        leave_room()
        timer.cancel()
        db.child("games").removeEventListener(gameListener)
    }

    override fun onPause() {
        super.onPause()
        leave_room()
    }

    override fun onResume() {
        super.onResume()
        val username = intent.getStringExtra("username")
        val mod = intent.getIntExtra("mod", 0)
        var roomList = listOf(
                "mod_1_rooms",
                "mod_2_rooms",
        )

        val users = ArrayList<String>()
        db.child(roomList[mod-1]).child("4").addListenerForSingleValueEvent(object :
            ValueEventListener {
            override fun onDataChange(dataSnapshot: DataSnapshot) {
                for (snapshot in dataSnapshot.children) {
                    val user = snapshot.key
                    if (user != username) {
                        users.add(user!!)
                    }
                }
                val usersString = users.joinToString(", ")

                Toast.makeText(this@ChooseWordsFourActivity, usersString, Toast.LENGTH_SHORT).show()
            }
            override fun onCancelled(error: DatabaseError) {
                TODO("Not yet implemented")
            }

        })

        db.child(roomList[mod-1]).child("4").child(username!!).setValue(hashMapOf("is_playing" to true))

    }

    private fun leave_room() {
        val mod = intent.getIntExtra("mod", 0)
        val username = intent.getStringExtra("username")
        val roomList = listOf(
            "mod_1_rooms",
            "mod_2_rooms",
        )

        db.child(roomList[mod-1]).child("4").child(username!!).removeValue()
    }

    private fun initUI() {
        val username = intent.getStringExtra("username")
        binding.txtUsername4.text = username
        val request_to = intent.getStringExtra("request_to")
        val request_from = intent.getStringExtra("request_from")
        val mod = intent.getIntExtra("mod", 0)
        var textList = listOf(
            binding.et41,
            binding.et42,
            binding.et43,
            binding.et44
        )


        for(i in 0 until textList.size) {
            textList[i].inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS
            textList[i].addTextChangedListener(object : TextWatcher {
                override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {
                    // Do nothing
                }

                override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {
                    // Do nothing
                }

                override fun afterTextChanged(s: Editable?) {
                    val text = s.toString()
                    if (text != text.toUpperCase()) {
                        textList[i].setText(text.toUpperCase())
                        textList[i].setSelection(text.length) // Reset cursor position
                    }
                    s?.let  {
                        if (it.length == 1 && i < textList.size - 1) {
                            textList[i+1].requestFocus()
                        } else if (it.length == 0 && i > 0) {
                            textList[i-1].requestFocus()
                        } else {
                            // Do nothing
                        }
                    }
                }
            })
        }

        binding.btnConfirm4.setOnClickListener{
            var word = ""
            for(editText in textList) {
                word += editText.text.toString()
            }


            db.child("games").addValueEventListener(object : ValueEventListener {
                override fun onDataChange(dataSnapshot: DataSnapshot) {
                    for (snapshot in dataSnapshot.children) {
                        val user_1_word = snapshot.child("user_1_word").value.toString()
                        val user_2_word = snapshot.child("user_2_word").value.toString()
                        if (user_1_word.length > 0 && user_2_word.length > 0) {
                            val intent = Intent(this@ChooseWordsFourActivity, FourGameActivity::class.java)
                            intent.putExtra("username", username)
                            intent.putExtra("mod", mod)
                            intent.putExtra("request_to", request_to)
                            intent.putExtra("request_from", request_from)
                            startActivity(intent)
                            finish()
                        }
                    }
                }

                override fun onCancelled(databaseError: DatabaseError) {
                    // Hata durumunda yapılacak işlemler
                }
            })

            GlobalScope.launch(Dispatchers.IO) {
                val url = "https://sozluk.gov.tr/gts_id?id=" + word
                val bodyText = URL(url).readText()
                withContext(Dispatchers.Main) {
                    //Toast.makeText(this@ChooseWordsFourActivity, bodyText, Toast.LENGTH_SHORT).show()
                    if (bodyText == """{"error":"Sonuç bulunamadı"}""") {
                        Toast.makeText(this@ChooseWordsFourActivity, "$word geçerli bir kelime değil!!!", Toast.LENGTH_SHORT).show()
                    } else {
                        db.child("games").addListenerForSingleValueEvent(object : ValueEventListener {
                            override fun onDataChange(dataSnapshot: DataSnapshot) {
                                for (snapshot in dataSnapshot.children) {
                                    val user_1 = snapshot.child("user_1").value.toString()
                                    val user_1_word = snapshot.child("user_1_word").value.toString()
                                    val user_2_word = snapshot.child("user_2_word").value.toString()
                                    if (user_1 == username) {
                                        db.child("games").child(snapshot.key!!).child("user_1_word").setValue(word)
                                    } else {
                                        db.child("games").child(snapshot.key!!).child("user_2_word").setValue(word)
                                    }

                                }
                            }

                            override fun onCancelled(error: DatabaseError) {
                                TODO("Not yet implemented")
                            }
                        })

                        binding.textView5.visibility = android.view.View.INVISIBLE
                        binding.et41.visibility = android.view.View.INVISIBLE
                        binding.et42.visibility = android.view.View.INVISIBLE
                        binding.et43.visibility = android.view.View.INVISIBLE
                        binding.et44.visibility = android.view.View.INVISIBLE
                        binding.btnConfirm4.visibility = android.view.View.INVISIBLE
                        binding.txtWait.visibility = android.view.View.VISIBLE
                    }
                }
            }
        }

        timer = object: CountDownTimer(60000, 1000) {
            override fun onTick(millisUntilFinished: Long) {
                val secondsRemaining = millisUntilFinished / 1000
                binding.etKronometre.setText(secondsRemaining.toString())
            }

            override fun onFinish() {

                gameListener = db.child("games").addValueEventListener(object : ValueEventListener {
                    override fun onDataChange(dataSnapshot: DataSnapshot) {
                        for (snapshot in dataSnapshot.children) {
                            val user_1 = snapshot.child("user_1").value.toString()
                            val user_2 = snapshot.child("user_2").value.toString()
                            val user_1_word = snapshot.child("user_1_word").value.toString()
                            val user_2_word = snapshot.child("user_2_word").value.toString()

                            if(user_1_word.length == 0 && user_2_word.length > 0) {
                                val intent = Intent(this@ChooseWordsFourActivity, Winner1Activity::class.java)
                                intent.putExtra("username", username)
                                intent.putExtra("winner", user_2)
                                startActivity(intent)
                                finish()
                            }else if (user_2_word.length == 0 && user_1_word.length > 0) {
                                val intent = Intent(this@ChooseWordsFourActivity, Winner1Activity::class.java)
                                intent.putExtra("username", username)
                                intent.putExtra("winner", user_1)
                                startActivity(intent)
                                finish()
                            }else {
                                binding.etKronometre.setText("0")
                                val intent =
                                    Intent(this@ChooseWordsFourActivity, ChooseWordsFourActivity::class.java)
                                intent.putExtra("username", username)
                                intent.putExtra("mod", mod)
                                intent.putExtra("request_to", request_to)
                                intent.putExtra("request_from", request_from)
                                timer.cancel()
                                startActivity(intent)
                                finish()
                            }
                        }

                    }

                    override fun onCancelled(error: DatabaseError) {
                        TODO("Not yet implemented")
                    }
                })
            }
        }
        timer.start()

    }

}
package com.gurkantngl.wordgame.ui

import android.os.Bundle
import android.text.Editable
import android.text.InputFilter
import android.text.InputType
import android.text.TextWatcher
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.compose.ui.text.toLowerCase
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.ValueEventListener
import com.google.firebase.database.ktx.database
import com.google.firebase.ktx.Firebase
import com.gurkantngl.wordgame.R
import com.gurkantngl.wordgame.databinding.ActivityChooseWordsSevenBinding
import org.jsoup.Jsoup
import org.jsoup.nodes.Document
import java.io.IOException


class ChooseWordsSevenActivity : AppCompatActivity() {

    private lateinit var binding: ActivityChooseWordsSevenBinding
    private val db = Firebase.database.reference

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityChooseWordsSevenBinding.inflate(layoutInflater)
        enableEdgeToEdge()
        setContentView(binding.root)
        initUI()
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        leave_room()
    }

    override fun onPause() {
        super.onPause()
        leave_room()
    }

    override fun onResume() {
        super.onResume()
        val username = intent.getStringExtra("username")
        val mod = intent.getIntExtra("mod", 0)

        var roomList = listOf(
            "mod_1_rooms",
            "mod_2_rooms",
        )

        val users = ArrayList<String>()

        db.child(roomList[mod-1]).child("7").addListenerForSingleValueEvent(object :
            ValueEventListener {
            override fun onDataChange(dataSnapshot: DataSnapshot) {
                for (snapshot in dataSnapshot.children) {
                    val user = snapshot.key
                    if (user != username) {
                        users.add(user!!)
                    }
                }
                val usersString = users.joinToString(", ")

                Toast.makeText(this@ChooseWordsSevenActivity, usersString, Toast.LENGTH_SHORT).show()
            }
            override fun onCancelled(error: DatabaseError) {
                TODO("Not yet implemented")
            }

        })

        db.child(roomList[mod-1]).child("7").child(username!!).setValue(hashMapOf("is_playing" to false))
    }


    private fun leave_room() {
        val mod = intent.getIntExtra("mod", 0)
        val username = intent.getStringExtra("username")
        val roomList = listOf(
            "mod_1_rooms",
            "mod_2_rooms",
        )

        db.child(roomList[mod - 1]).child("7").child(username!!).removeValue()
    }


    fun isTurkishWord(word: String): Boolean {
        val url = "https://sozluk.gov.tr/gts?ara=kelime"
        return try {
            val document: Document = Jsoup.connect(url).get()
            val elementText = document.body().text()
            val expectedText = "{\"error\":\"Sonuç bulunamadı\"}"
            elementText != expectedText
        } catch (e: IOException) {
            false
        }
    }

    private fun initUI() {
        val username = intent.getStringExtra("username")
        binding.txtUsername7.text = username
        var textList = listOf(
            binding.et71,
            binding.et72,
            binding.et73,
            binding.et74,
            binding.et75,
            binding.et76,
            binding.et77
        )

        for (i in 0 until textList.size) {
            textList[i].filters = arrayOf<InputFilter>(InputFilter.LengthFilter(1))
        }

        for(editText in textList) {
            editText.inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS
            editText.addTextChangedListener(object : TextWatcher {
                override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {
                    // Do nothing
                }

                override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {
                    // Do nothing
                }

                override fun afterTextChanged(s: Editable) {
                    val text = s.toString()
                    if (text != text.toUpperCase()) {
                        editText.setText(text.toUpperCase())
                        editText.setSelection(text.length) // Reset cursor position
                    }
                }
            })
        }

        binding.btnConfirm7.setOnClickListener{
            var word = ""
            for (editText in textList) {
                word += editText.text.toString()

            }
            val isWord = isTurkishWord(word.lowercase())
            Toast.makeText(this, "$word + $isWord", Toast.LENGTH_SHORT).show()
        }
    }
}
package com.gurkantngl.wordgame.ui

import android.content.Intent
import android.os.Bundle
import android.os.CountDownTimer
import android.text.Editable
import android.text.InputFilter
import android.text.InputType
import android.text.TextWatcher
import android.view.View
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.ValueEventListener
import com.google.firebase.database.ktx.database
import com.google.firebase.ktx.Firebase
import com.gurkantngl.wordgame.R
import com.gurkantngl.wordgame.databinding.ActivityChooseWordsSixBinding
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.net.URL

class ChooseWordsSixActivity : AppCompatActivity() {

    private lateinit var binding : ActivityChooseWordsSixBinding
    private val db = Firebase.database.reference
    private lateinit var timer: CountDownTimer
    private lateinit var gameListener: ValueEventListener

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityChooseWordsSixBinding.inflate(layoutInflater)
        enableEdgeToEdge()
        setContentView(binding.root)
        initUI()
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        leave_room()
        timer.cancel()
        db.child("games").removeEventListener(gameListener)
    }

    override fun onPause() {
        super.onPause()
        leave_room()
    }

    override fun onResume() {
        super.onResume()
        val username = intent.getStringExtra("username")
        val mod = intent.getIntExtra("mod", 0)
        var roomList = listOf(
            "mod_1_rooms",
            "mod_2_rooms",
        )

        val users = ArrayList<String>()

            db.child(roomList[mod-1]).child("6").addListenerForSingleValueEvent(object :
            ValueEventListener {
            override fun onDataChange(dataSnapshot: DataSnapshot) {
                for (snapshot in dataSnapshot.children) {
                    val user = snapshot.key
                    if (user != username) {
                        users.add(user!!)
                    }
                }
                val usersString = users.joinToString(", ")

                Toast.makeText(this@ChooseWordsSixActivity, usersString, Toast.LENGTH_SHORT).show()
            }
            override fun onCancelled(error: DatabaseError) {
                TODO("Not yet implemented")
            }

        })

        db.child(roomList[mod-1]).child("6").child(username!!).setValue(hashMapOf("is_playing" to false))
    }

    private fun leave_room() {
        val mod = intent.getIntExtra("mod", 0)
        val username = intent.getStringExtra("username")
        val roomList = listOf(
            "mod_1_rooms",
            "mod_2_rooms",
        )

        db.child(roomList[mod - 1]).child("6").child(username!!).removeValue()
    }

    private fun initUI() {
        val username = intent.getStringExtra("username")
        binding.txtUsername6.text = username
        val request_to = intent.getStringExtra("request_to")
        val request_from = intent.getStringExtra("request_from")
        val mod = intent.getIntExtra("mod", 0)
        var textList = listOf(
            binding.et61,
            binding.et62,
            binding.et63,
            binding.et64,
            binding.et65,
            binding.et66
        )

        for(i in 0 until textList.size) {
            textList[i].inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS
            textList[i].addTextChangedListener(object : TextWatcher {
                override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {
                    // Do nothing
                }

                override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {
                    // Do nothing
                }

                override fun afterTextChanged(s: Editable?) {
                    val text = s.toString()
                    if (text != text.toUpperCase()) {
                        textList[i].setText(text.toUpperCase())
                        textList[i].setSelection(text.length) // Reset cursor position
                    }
                    s?.let  {
                        if (it.length == 1 && i < textList.size - 1) {
                            textList[i+1].requestFocus()
                        } else if (it.length == 0 && i > 0) {
                            textList[i-1].requestFocus()
                        } else {
                            // Do nothing
                        }
                    }
                }
            })
        }
        binding.btnConfirm6.setOnClickListener{
            var word = ""
            for (editText in textList) {
                word += editText.text.toString()
            }
            db.child("games").addValueEventListener(object : ValueEventListener {
                override fun onDataChange(dataSnapshot : DataSnapshot) {
                    for (snapshot in dataSnapshot.children) {
                        val user_1_word = snapshot.child("user_1_word").value.toString()
                        val user_2_word = snapshot.child("user_2_word").value.toString()
                        if (user_1_word.length > 0 && user_2_word.length > 0) {
                            val intent = Intent(this@ChooseWordsSixActivity, SixGameActivity::class.java)
                            intent.putExtra("username", username)
                            intent.putExtra("mod", mod)
                            intent.putExtra("request_to", request_to)
                            intent.putExtra("request_from", request_from)
                            startActivity(intent)
                            finish()
                        }
                    }
                }

                override fun onCancelled(error: DatabaseError) {
                    TODO("Not yet implemented")
                }
            })
            GlobalScope.launch(Dispatchers.IO) {
                val url = "https://sozluk.gov.tr/gts_id?id=" + word
                val bodyText = URL(url).readText()
                withContext(Dispatchers.Main) {
                    if (bodyText == """{"error":"Sonuç bulunamadı"}""") {
                        Toast.makeText(this@ChooseWordsSixActivity, "$word geçerli bir kelime değil!!!", Toast.LENGTH_SHORT).show()
                    } else {
                        db.child("games").addListenerForSingleValueEvent(object : ValueEventListener {
                            override fun onDataChange(dataSnapshot: DataSnapshot) {
                                for (snapshot in dataSnapshot.children) {
                                    val user_1 = snapshot.child("user_1").value.toString()
                                    val user_1_word = snapshot.child("user_1_word").value.toString()
                                    val user_2_word = snapshot.child("user_2_word").value.toString()
                                    if (user_1 == username) {
                                        db.child("games").child(snapshot.key!!).child("user_1_word").setValue(word)
                                    } else {
                                        db.child("games").child(snapshot.key!!).child("user_2_word").setValue(word)
                                    }

                                }
                            }

                            override fun onCancelled(error: DatabaseError) {
                                TODO("Not yet implemented")
                            }
                        })

                        binding.txtWait6.visibility = View.INVISIBLE
                        binding.et61.visibility = View.INVISIBLE
                        binding.et62.visibility = View.INVISIBLE
                        binding.et63.visibility = View.INVISIBLE
                        binding.et64.visibility = View.INVISIBLE
                        binding.btnConfirm6.visibility = View.INVISIBLE
                        binding.txtInfo6.visibility = View.VISIBLE
                    }
                }
            }
        }
        timer = object: CountDownTimer(60000, 1000) {
            override fun onTick(millisUntilFinished: Long) {
                val secondsRemaining = millisUntilFinished / 1000
                binding.etKronometre6.setText(secondsRemaining.toString())
            }

            override fun onFinish() {

                gameListener = db.child("games").addValueEventListener(object : ValueEventListener {
                    override fun onDataChange(dataSnapshot: DataSnapshot) {
                        for (snapshot in dataSnapshot.children) {
                            val user_1 = snapshot.child("user_1").value.toString()
                            val user_2 = snapshot.child("user_2").value.toString()
                            val user_1_word = snapshot.child("user_1_word").value.toString()
                            val user_2_word = snapshot.child("user_2_word").value.toString()

                            if(user_1_word.length == 0 && user_2_word.length > 0) {
                                val intent = Intent(this@ChooseWordsSixActivity, Winner1Activity::class.java)
                                intent.putExtra("username", username)
                                intent.putExtra("winner", user_2)
                                startActivity(intent)
                                finish()
                            }else if (user_2_word.length == 0 && user_1_word.length > 0) {
                                val intent = Intent(this@ChooseWordsSixActivity, Winner1Activity::class.java)
                                intent.putExtra("username", username)
                                intent.putExtra("winner", user_1)
                                startActivity(intent)
                                finish()
                            }else {
                                binding.etKronometre6.setText("0")
                                val intent =
                                    Intent(this@ChooseWordsSixActivity, ChooseWordsSixActivity::class.java)
                                intent.putExtra("username", username)
                                intent.putExtra("mod", mod)
                                intent.putExtra("request_to", request_to)
                                intent.putExtra("request_from", request_from)
                                timer.cancel()
                                startActivity(intent)
                                finish()
                            }
                        }

                    }

                    override fun onCancelled(error: DatabaseError) {
                        TODO("Not yet implemented")
                    }
                })
            }
        }
        timer.start()
    }

}
package com.gurkantngl.wordgame.ui

import android.graphics.PorterDuff
import android.os.Bundle
import android.text.Editable
import android.text.InputType
import android.text.TextWatcher
import android.view.inputmethod.EditorInfo
import android.widget.EditText
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import com.google.firebase.Firebase
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.ValueEventListener
import com.google.firebase.database.database
import com.gurkantngl.wordgame.R
import com.gurkantngl.wordgame.databinding.ActivityFiveGameBinding

class FiveGameActivity : AppCompatActivity() {

    private lateinit var binding: ActivityFiveGameBinding
    private val db = Firebase.database.reference

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        binding = ActivityFiveGameBinding.inflate(layoutInflater)
        setContentView(binding.root)
        initUI()
    }
    private fun initUI() {
        var username = intent.getStringExtra("username")
        var mod = intent.getIntExtra("mod", 0)
        setEditTexts(0)
    }
    private fun setEditTexts(hak: Int){
        var textList1 = listOf<EditText>(
            binding.et511, binding.et512, binding.et513, binding.et514, binding.et515
        )
        var textList2 = listOf<EditText>(
            binding.et521, binding.et522, binding.et523, binding.et524, binding.et525
        )
        var textList3 = listOf<EditText>(
            binding.et531, binding.et532, binding.et533, binding.et534, binding.et535
        )
        var textList4 = listOf<EditText>(
            binding.et541, binding.et542, binding.et543, binding.et544, binding.et545
        )
        var textList5 = listOf<EditText>(
            binding.et551, binding.et552, binding.et553, binding.et554, binding.et555
        )

        if (hak == 0) {
            editOff(textList2)
            editOff(textList3)
            editOff(textList4)
            editOff(textList5)
            word(textList1, hak)
        }else if (hak== 1) {
            editOff(textList1)
            editOff(textList3)
            editOff(textList4)
            editOff(textList5)
            word(textList2, hak)
        }else if (hak== 2) {
            editOff(textList1)
            editOff(textList2)
            editOff(textList4)
            editOff(textList5)
            word(textList3, hak)
        }else if (hak == 3) {
            editOff(textList1)
            editOff(textList2)
            editOff(textList3)
            editOff(textList5)
            word(textList4, hak)
        }else if (hak == 4) {
            editOff(textList1)
            editOff(textList2)
            editOff(textList3)
            editOff(textList4)
            word(textList5, hak)
        }
    }

    private fun word(textList : List<EditText>, hak : Int) {
        var username = intent.getStringExtra("username")
        textList[textList.size-1].setOnEditorActionListener{ v, actionId, event ->
            if (actionId == EditorInfo.IME_ACTION_DONE) {
                db.child("games").addListenerForSingleValueEvent(object : ValueEventListener {
                    override fun onDataChange(dataSnapShot: DataSnapshot) {
                        for (snapshot in dataSnapShot.children) {
                            var question = ""
                            var word = ""
                            val user_1 = snapshot.child("user_1").value.toString()
                            val user_1_word = snapshot.child("user_1_word").value.toString()
                            val user_2 = snapshot.child("user_2").value.toString()
                            val user_2_word = snapshot.child("user_2_word").value.toString()
                            if (user_1 == username) {
                                question = user_2_word
                            } else {
                                question = user_1_word
                            }
                            for (editText in textList) {
                                word += editText.text.toString()
                            }
                            if (word == question) {
                                for (editText in textList) {
                                    editText.background.setColorFilter(
                                        ContextCompat.getColor(
                                            this@FiveGameActivity,
                                            R.color.green
                                        ), PorterDuff.Mode.SRC_IN
                                    )
                                }
                            } else {
                                for (i in 0 until textList.size) {
                                    val indices = mutableListOf<Int>()
                                    for ((index, value) in question.withIndex()) {
                                        if (value.toString() == textList[i].text.toString()) {
                                            indices.add(index)
                                        }
                                    }
                                    if (indices.contains(i)) {
                                        textList[i].background.setColorFilter(
                                            ContextCompat.getColor(
                                                this@FiveGameActivity,
                                                R.color.green
                                            ), PorterDuff.Mode.SRC_IN
                                        )
                                    } else if (question.contains((textList[i].text.toString())) && !(indices.contains(i))) {
                                        textList[i].background.setColorFilter(
                                            ContextCompat.getColor(
                                                this@FiveGameActivity,
                                                R.color.yellow
                                            ), PorterDuff.Mode.SRC_IN
                                        )
                                    } else {
                                        textList[i].background.setColorFilter(
                                            ContextCompat.getColor(
                                                this@FiveGameActivity,
                                                R.color.gray
                                            ), PorterDuff.Mode.SRC_IN
                                        )
                                    }
                                }
                            }
                        }

                    }

                    override fun onCancelled(error: DatabaseError) {
                        TODO("Not yet implemented")
                    }
                })
                setEditTexts(hak+1)
                true
            }else {
                false
            }
            }
        for (i in 0 until textList.size) {
            textList[i].setEnabled(true)
            textList[i].inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS
            textList[i].addTextChangedListener(object : TextWatcher {
                override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {
                }

                override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                }

                override fun afterTextChanged(s: Editable?) {
                    val text = s.toString()
                    if (text != text.toUpperCase()) {
                        textList[i].setText(text.toUpperCase())
                        textList[i].setSelection(text.length)
                    }
                    s?.let {
                        if (it.length == 1 && i < textList.size - 1) {
                            textList[i+1].requestFocus()
                        }else if (it.length == 0 && i > 0) {
                            textList[i-1].requestFocus()
                        }else {
                            // Do nothing
                        }
                    }
                }
            })
        }
    }
    private fun editOff(textList: List<EditText>) {
        for (i in 0 until textList.size) {
            textList[i].setEnabled(false)
        }
    }
}
package com.gurkantngl.wordgame.ui

import android.graphics.PorterDuff
import android.os.Bundle
import android.text.Editable
import android.text.InputType
import android.text.TextWatcher
import android.view.inputmethod.EditorInfo
import android.widget.EditText
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.compose.runtime.collection.mutableVectorOf
import androidx.compose.ui.text.toUpperCase
import androidx.core.content.ContextCompat
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import com.google.firebase.Firebase
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.ValueEventListener
import com.google.firebase.database.database
import com.gurkantngl.wordgame.R
import com.gurkantngl.wordgame.databinding.ActivityFourGameBinding
import java.util.concurrent.atomic.AtomicInteger

class FourGameActivity : AppCompatActivity() {

    private lateinit var binding: ActivityFourGameBinding
    private val db = Firebase.database.reference

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        binding = ActivityFourGameBinding.inflate(layoutInflater)
        setContentView(binding.root)
        initUI()
    }

    private fun initUI() {
        var username = intent.getStringExtra("username")
        var mod = intent.getIntExtra("mod", 0)
        setEditTexts(0)
    }
    private fun setEditTexts(hak: Int){
        var textList1 = listOf<EditText>(
            binding.et411, binding.et412, binding.et413, binding.et414,
        )
        var textList2 = listOf<EditText>(
            binding.et421, binding.et422, binding.et423, binding.et424,
        )
        var textList3 = listOf<EditText>(
            binding.et431, binding.et432, binding.et433, binding.et434,
        )
        var textList4 = listOf<EditText>(
            binding.et441, binding.et442, binding.et443, binding.et444,
        )

        if (hak == 0) {
            editOff(textList2)
            editOff(textList3)
            editOff(textList4)
            word(textList1, hak)
        }else if (hak== 1) {
            editOff(textList1)
            editOff(textList3)
            editOff(textList4)
            word(textList2, hak)
        }else if (hak== 2) {
            editOff(textList1)
            editOff(textList2)
            editOff(textList4)
            word(textList3, hak)
        }else if (hak == 3) {
            editOff(textList1)
            editOff(textList2)
            editOff(textList3)
            word(textList4, hak)
        }
    }

    private fun word(textList : List<EditText>, hak : Int) {
        var username = intent.getStringExtra("username")
        textList[textList.size-1].setOnEditorActionListener{ v, actionId, event ->
            if (actionId == EditorInfo.IME_ACTION_DONE) {
                db.child("games").addListenerForSingleValueEvent(object : ValueEventListener {
                    override fun onDataChange(dataSnapshot: DataSnapshot) {
                        for (snapshot in dataSnapshot.children) {
                            var question = ""
                            var word = ""
                            val user_1 = snapshot.child("user_1").value.toString()
                            val user_1_word = snapshot.child("user_1_word").value.toString()
                            val user_2 = snapshot.child("user_2").value.toString()
                            val user_2_word = snapshot.child("user_2_word").value.toString()
                            if (user_1 == username) {
                                question = user_2_word
                            }else {
                                question = user_1_word
                            }
                            for (editText in textList) {
                                word += editText.text.toString()
                            }
                            if (word == question) {
                                for (editText in textList) {
                                    editText.background.setColorFilter(ContextCompat.getColor(this@FourGameActivity, R.color.green), PorterDuff.Mode.SRC_IN)
                                }
                            }else {
                                for(i in 0 until textList.size) {
                                    val indices = mutableListOf<Int>()
                                    for ((index, value) in question.withIndex()) {
                                        if (value.toString() == textList[i].text.toString()) {
                                            indices.add(index)
                                        }
                                    }
                                    if (indices.contains(i)) {
                                        textList[i].background.setColorFilter(
                                            ContextCompat.getColor(
                                                this@FourGameActivity,
                                                R.color.green
                                            ), PorterDuff.Mode.SRC_IN
                                        )
                                    } else if (question.contains((textList[i].text.toString())) && !indices.contains(i)) {
                                        textList[i].background.setColorFilter(
                                            ContextCompat.getColor(
                                                this@FourGameActivity,
                                                R.color.yellow
                                            ), PorterDuff.Mode.SRC_IN
                                        )
                                    } else {
                                        textList[i].background.setColorFilter(
                                            ContextCompat.getColor(
                                                this@FourGameActivity,
                                                R.color.gray
                                            ), PorterDuff.Mode.SRC_IN
                                        )
                                    }
                                }
                            }


                        }
                    }

                    override fun onCancelled(error: DatabaseError) {
                        TODO("Not yet implemented")
                    }
                })

                Toast.makeText(this, "Enter a basıldı", Toast.LENGTH_SHORT).show()
                setEditTexts(hak+1)
                true
            } else {
                false
            }
        }
        for (i in 0 until textList.size) {
            textList[i].setEnabled(true)
            textList[i].inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS
            textList[i].addTextChangedListener(object : TextWatcher {
                override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {
                }

                override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                }

                override fun afterTextChanged(s: Editable?) {
                    val text = s.toString()
                    if (text != text.toUpperCase()) {
                        textList[i].setText(text.toUpperCase())
                        textList[i].setSelection(text.length)
                    }
                    s?.let {
                        if (it.length == 1 && i < textList.size - 1) {
                            textList[i+1].requestFocus()
                        }else if (it.length == 0 && i > 0) {
                            textList[i-1].requestFocus()
                        }else {
                            // Do nothing
                        }
                    }
                }
            })
        }
    }

    private fun editOff(textList : List<EditText>) {
        for (i in 0 until textList.size) {
            textList[i].setEnabled(false)
        }
    }

}
package com.gurkantngl.wordgame.ui

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import com.gurkantngl.wordgame.R
import com.gurkantngl.wordgame.databinding.ActivityModSelectBinding

class ModSelectActivity : AppCompatActivity() {

    private lateinit var binding : ActivityModSelectBinding


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityModSelectBinding.inflate(layoutInflater)

        enableEdgeToEdge()
        setContentView(binding.root)

        val intent = intent
        val username = intent.getStringExtra("username")
        binding.tvWelcome.text = "Hoş geldiniz $username"

        initUI()

        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }
    }

    private fun initUI () {

        binding.btnMod1.setOnClickListener{
            val mod = 1
            val username = intent.getStringExtra("username")
            val intent = Intent(this, CharNumberActivity::class.java)
            intent.putExtra("mod", mod)
            intent.putExtra("username", username)
            startActivity(intent)
        }

        binding.btnMod2.setOnClickListener{
            val mod = 2
            val username = intent.getStringExtra("username")
            val intent = Intent(this, CharNumberActivity::class.java)
            intent.putExtra("mod", mod)
            intent.putExtra("username", username)
            startActivity(intent)

        }

        binding.btnExit.setOnClickListener{
            val sharedPreferences = this.getSharedPreferences("com.gurkantngl.wordgame", Context.MODE_PRIVATE)
            sharedPreferences.edit().remove("username").apply()
            val intent = Intent(this, SignInActivity::class.java)
            startActivity(intent)
            finish()
        }
    }
}
package com.gurkantngl.wordgame.ui

import android.content.Intent
import androidx.appcompat.app.AlertDialog
import android.os.Bundle
import android.os.CountDownTimer
import android.view.View
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.recyclerview.widget.LinearLayoutManager
import com.google.firebase.database.ChildEventListener
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.ValueEventListener
import com.google.firebase.database.ktx.database
import com.google.firebase.ktx.Firebase
import com.gurkantngl.wordgame.R
import com.gurkantngl.wordgame.databinding.ActivityPlayersInRoomBinding

class PlayersInRoomActivity : AppCompatActivity() {

    private lateinit var binding : ActivityPlayersInRoomBinding
    private val db = Firebase.database.reference

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        binding = ActivityPlayersInRoomBinding.inflate(layoutInflater)
        setContentView(binding.root)
        initUI()
    }

    override fun onDestroy() {
        super.onDestroy()
        leave_room()
    }

    override fun onPause() {
        super.onPause()
        leave_room()
    }

    override fun onResume() {
        super.onResume()
        val username = intent.getStringExtra("username")
        val mod = intent.getIntExtra("mod", 0)
        val room_number = intent.getIntExtra("roomNumber", 0)
        val roomList = listOf(
            "mod_1_rooms",
            "mod_2_rooms",
        )

        val users = ArrayList<String>()

        db.child(roomList[mod-1]).child(room_number.toString()).addListenerForSingleValueEvent(object :
            ValueEventListener {
            override fun onDataChange(dataSnapshot: DataSnapshot) {
                for (snapshot in dataSnapshot.children) {
                    val user = snapshot.key
                    if (user != username) {
                        users.add(user!!)
                    }
                }
                val usersString = users.joinToString(", ")

                Toast.makeText(this@PlayersInRoomActivity, usersString, Toast.LENGTH_SHORT).show()
            }
            override fun onCancelled(error: DatabaseError) {
                TODO("Not yet implemented")
            }

        })

        db.child(roomList[mod-1]).child(room_number.toString()).child(username!!).setValue(hashMapOf("is_playing" to false))

    }

    private fun leave_room() {
        val mod = intent.getIntExtra("mod", 0)
        val username = intent.getStringExtra("username")
        val room_number = intent.getIntExtra("roomNumber", 0)
        val roomList = listOf(
            "mod_1_rooms",
            "mod_2_rooms",
        )

        db.child(roomList[mod-1]).child(room_number.toString()).child(username!!).removeValue()
    }

    private fun initUI () {
        val users = ArrayList<String>()

        val username = intent.getStringExtra("username")
        val mod = intent.getIntExtra("mod", 0)
        val roomNumber = intent.getIntExtra("roomNumber", 0)
        binding.txtModInfo.text = "Mod $mod - $roomNumber harf"
        val roomList = listOf(
            "mod_1_rooms",
            "mod_2_rooms",
        )

        db.child(roomList[mod-1]).child(roomNumber.toString()).addValueEventListener(object :
            ValueEventListener {
            override fun onDataChange(dataSnapshot: DataSnapshot) {
                users.clear()
                for (snapshot in dataSnapshot.children) {
                    val user = snapshot.key
                    val is_playing = snapshot.child("is_playing").getValue(Boolean::class.java) ?: false
                    var play = ""
                    if (is_playing == true) {
                        play = " - oyunda"
                    }else {
                        play = " - aktif"
                    }
                    if (user != username) {
                        users.add(user!! + play)
                    }
                }
                val usersString = users.joinToString(", ")
                Toast.makeText(this@PlayersInRoomActivity, usersString, Toast.LENGTH_SHORT).show()

                if (!users.isEmpty()) {
                    binding.txtEmpty.visibility = View.GONE
                }else {
                    binding.txtEmpty.visibility = View.VISIBLE
                }

                val layoutManager = LinearLayoutManager(this@PlayersInRoomActivity)
                binding.recyclerView.layoutManager = layoutManager

                val adapter = RecyclerAdapter(users, username!!)
                binding.recyclerView.adapter = adapter

            }
            override fun onCancelled(error: DatabaseError) {
                TODO("Not yet implemented")
            }

        })

        db.child("requests").addChildEventListener(object : ChildEventListener {
            override fun onChildAdded(dataSnapshot: DataSnapshot, previousChildName: String?) {
                val requestTo = dataSnapshot.child("request_to").getValue(String::class.java)
                val requestFrom = dataSnapshot.child("request_from").getValue(String::class.java)
                val requestId = dataSnapshot.key
                if (requestTo == username) {
                    Toast.makeText(this@PlayersInRoomActivity, "Oynama isteği var", Toast.LENGTH_SHORT).show()

                    lateinit var alertDialog: AlertDialog // alertDialog'ı tanımla

                    // CountDownTimer'ı tanımla
                    val countDownTimerobject = object : CountDownTimer(10000, 1000) {
                        override fun onTick(millisUntilFinished: Long) {
                            alertDialog.getButton(AlertDialog.BUTTON_POSITIVE).text = "Kabul Et (${millisUntilFinished / 1000})"
                        }

                        override fun onFinish() {
                            alertDialog.dismiss()
                            val requestStatusRef = db.child("requests").child(requestId.toString()).child("request_status")
                            requestStatusRef.addListenerForSingleValueEvent(object : ValueEventListener {
                                override fun onDataChange(dataSnapshot: DataSnapshot) {
                                    val status = dataSnapshot.getValue(Int::class.java)
                                    if (status == 0) {
                                        db.child("requests").child(requestId.toString()).child("request_status").setValue(2)
                                    }
                                }

                                override fun onCancelled(databaseError: DatabaseError) {
                                    // Handle possible errors.
                                }
                            })
                        }
                    }

                    val builder = AlertDialog.Builder(this@PlayersInRoomActivity)
                    builder.setTitle("Oynama İsteği")
                    builder.setMessage("${dataSnapshot.child("request_from").getValue(String::class.java)} sizi oyununa davet ediyor.\nKabul ediyor musunuz?")
                    builder.setPositiveButton("Kabul Et") { dialog, which ->
                        countDownTimerobject.cancel()
                        db.child("requests").child(requestId.toString()).child("request_status").setValue(1)
                    }
                    builder.setNegativeButton("Reddet") { dialog, which ->
                        countDownTimerobject.cancel()
                        db.child("requests").child(requestId.toString()).child("request_status").setValue(2)
                    }
                    alertDialog = builder.create() // alertDialog'ı oluştur
                    alertDialog.show()

                    // CountDownTimer'ı başlat
                    countDownTimerobject.start()


                    // Add ValueEventListener to check if request_status is 2
                    db.child("requests").child(requestId.toString()).child("request_status").addValueEventListener(object : ValueEventListener {
                        override fun onDataChange(dataSnapshot: DataSnapshot) {
                            val status = dataSnapshot.getValue(Int::class.java)
                            if (status == 2) {
                                alertDialog.dismiss()
                                countDownTimerobject.cancel()
                                Toast.makeText(this@PlayersInRoomActivity, "İstek iptal edildi", Toast.LENGTH_SHORT).show()
                            }else if (status == 1) {
                                val activityMap = mapOf(
                                    4 to ChooseWordsFourActivity::class.java,
                                    5 to ChooseWordsFiveActivity::class.java,
                                    6 to ChooseWordsSixActivity::class.java,
                                    7 to ChooseWordsSevenActivity::class.java
                                )
                                val activityClass = activityMap[roomNumber]
                                if (activityClass != null) {
                                    db.child(roomList[mod-1]).child(roomNumber.toString()).child(username!!).child("is_playing").setValue(true)
                                    val intent = Intent(this@PlayersInRoomActivity, activityClass)
                                    intent.putExtra("username", username)
                                    intent.putExtra("mod", mod)
                                    startActivity(intent)
                                }else {
                                    Toast.makeText(this@PlayersInRoomActivity, "Server Error!!!", Toast.LENGTH_SHORT).show()
                                }

                            }
                        }

                        override fun onCancelled(databaseError: DatabaseError) {
                            // Handle possible errors.
                        }
                    })
                } else if (requestFrom == username) {
                    Toast.makeText(this@PlayersInRoomActivity, "Oynama isteği gönderildi", Toast.LENGTH_SHORT).show()

                    lateinit var alertDialog: AlertDialog // alertDialog'ı tanımla
                    val builder = AlertDialog.Builder(this@PlayersInRoomActivity)
                    builder.setTitle("Oynama İsteği")
                    // CountDownTimer'ı tanımla
                    val countDownTimerobject = object : CountDownTimer(10000, 1000) {
                        override fun onTick(millisUntilFinished: Long) {
                            alertDialog.setMessage("${dataSnapshot.child("request_to").getValue(String::class.java)} kişisine istek gönderildi.\n Yanıt Bekleniyor...(${millisUntilFinished / 1000})")
                        }

                        override fun onFinish() {
                            alertDialog.dismiss()
                            val requestStatusRef = db.child("requests").child(requestId.toString()).child("request_status")
                            requestStatusRef.addListenerForSingleValueEvent(object : ValueEventListener {
                                override fun onDataChange(dataSnapshot: DataSnapshot) {
                                    val status = dataSnapshot.getValue(Int::class.java)
                                    if (status == 0) {
                                        db.child("requests").child(requestId.toString()).child("request_status").setValue(2)
                                    }
                                }

                                override fun onCancelled(databaseError: DatabaseError) {
                                    // Handle possible errors.
                                }
                            })
                        }
                    }

                    builder.setNegativeButton("İptal"){ dialog, which ->
                        db.child("requests").child(requestId.toString()).child("request_status").setValue(2)
                        countDownTimerobject.cancel()
                    }

                    builder.setMessage("${dataSnapshot.child("request_to").getValue(String::class.java)} kişisine istek gönderildi.\nYanıt Bekleniyor...")
                    alertDialog = builder.create() // alertDialog'ı oluştur
                    alertDialog.show()

                    countDownTimerobject.start()

                    // Add ValueEventListener to check if request_status is 2
                    db.child("requests").child(requestId.toString()).addValueEventListener(object : ValueEventListener {
                        override fun onDataChange(dataSnapshot: DataSnapshot) {
                            val status = dataSnapshot.child("request_status").getValue(Int::class.java)
                            val request_to = dataSnapshot.child("request_to").getValue(String::class.java)
                            val request_from = dataSnapshot.child("request_from").getValue(String::class.java)

                            if (status == 2) {
                                alertDialog.dismiss()
                                countDownTimerobject.cancel()
                                Toast.makeText(this@PlayersInRoomActivity, "İstek iptal edildi", Toast.LENGTH_SHORT).show()
                            } else if (status == 1) {
                                val activityMap = mapOf(
                                    4 to ChooseWordsFourActivity::class.java,
                                    5 to ChooseWordsFiveActivity::class.java,
                                    6 to ChooseWordsSixActivity::class.java,
                                    7 to ChooseWordsSevenActivity::class.java
                                )
                                val activityClass = activityMap[roomNumber]
                                if (activityClass != null) {

                                    val userMap = hashMapOf(
                                        "mod" to mod,
                                        "room_number" to roomNumber,
                                        "user_1" to request_to,
                                        "user_1_word" to "",
                                        "user_2" to request_from,
                                        "user_2_word" to "",
                                    )

                                    db.child("games").push().setValue(userMap)
                                        .addOnSuccessListener {
                                            val intent = Intent(this@PlayersInRoomActivity, activityClass)
                                            intent.putExtra("request_to", request_to)
                                            intent.putExtra("request_from", request_from)
                                            intent.putExtra("username", username)
                                            intent.putExtra("mod", mod)
                                            startActivity(intent)
                                        }
                                        .addOnFailureListener {
                                            Toast.makeText(this@PlayersInRoomActivity, "Error Creating Game", Toast.LENGTH_SHORT).show()
                                        }
                                } else {
                                    Toast.makeText(this@PlayersInRoomActivity, "Server Error!!!", Toast.LENGTH_SHORT).show()
                                }
                            }
                        }

                        override fun onCancelled(databaseError: DatabaseError) {
                            // Handle possible errors.
                        }
                    })
                }
            }

            override fun onChildChanged(dataSnapshot: DataSnapshot, previousChildName: String?) {
                // Veri değiştiğinde burası çağrılır.
            }

            override fun onChildRemoved(dataSnapshot: DataSnapshot) {
                // Veri silindiğinde burası çağrılır.
            }

            override fun onChildMoved(dataSnapshot: DataSnapshot, previousChildName: String?) {
                // Veri taşındığında burası çağrılır.
            }

            override fun onCancelled(databaseError: DatabaseError) {
                // Veri okuma hatası oluştuğunda burası çağrılır.
                // databaseError, hatayı açıklar.
            }
        })

    }
}
package com.gurkantngl.wordgame.ui

import android.content.Intent
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import android.widget.Toast
import androidx.recyclerview.widget.RecyclerView
import com.google.firebase.database.ktx.database
import com.google.firebase.firestore.ktx.firestore
import com.google.firebase.ktx.Firebase
import com.gurkantngl.wordgame.R

class RecyclerAdapter (val usersList : ArrayList<String>, val currentUser : String) :
    RecyclerView.Adapter<RecyclerAdapter.UsersVH>() {
    private val db = Firebase.database.reference
    class UsersVH (itemView : View) : RecyclerView.ViewHolder(itemView) {
        val recyclerViewTextView: TextView = itemView.findViewById(R.id.recyclerViewTextView)
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): UsersVH {
        val itemView = LayoutInflater.from(parent.context).inflate(R.layout.recycler_row, parent, false)
        return UsersVH(itemView)
    }

    override fun getItemCount(): Int {
        return usersList.size
    }

    override fun onBindViewHolder(holder: UsersVH, position: Int) {
        holder.recyclerViewTextView.text = usersList[position]
        holder.recyclerViewTextView.setOnClickListener{
            // 0 -> pending
            // 1 -> accepted
            // 2 -> rejected
            val user = usersList[position].substringBefore("-").trim()
            val requestMap = hashMapOf(
                "request_to" to user,
                "request_from" to currentUser,
                "request_status" to 0
            )
            db.child("requests").push().setValue(requestMap)
        }
    }

}
package com.gurkantngl.wordgame.ui

import android.content.Context
import android.content.Intent
import android.content.SharedPreferences
import android.os.Bundle
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import com.google.firebase.Firebase
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.firestore
import com.gurkantngl.wordgame.R
import com.gurkantngl.wordgame.databinding.ActivityMainBinding

class SignInActivity : AppCompatActivity() {

    private lateinit var  binding : ActivityMainBinding
    private lateinit var firebaseAuth: FirebaseAuth
    lateinit var sharedProcess: SharedPreferences
    private var db = Firebase.firestore

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        enableEdgeToEdge()
        setContentView(binding.root)

        var sharedPreferences = this.getSharedPreferences("com.gurkantngl.wordgame", Context.MODE_PRIVATE)
        sharedProcess = sharedPreferences

        firebaseAuth = FirebaseAuth.getInstance()

        var username = sharedPreferences.getString("username", "")
        if(username == "") {
            //Initialize the UI
            initUI()
        }else {
            val intent = Intent(this, ModSelectActivity::class.java)
            intent.putExtra("username", username)
            startActivity(intent)
            finish()
        }
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }
    }

    private  fun initUI() {
        binding.fabBack.setOnClickListener{

        }
        binding.btnSignIn.setOnClickListener{
            val username = binding.etUsernameSignin.text.toString()
            val password = binding.etPassword.text.toString()

            if (username.isEmpty() || password.isEmpty()){
                Toast.makeText(this, "Kullanıcı adı ve şifre gereklidir", Toast.LENGTH_SHORT).show()
            }else{
                db.collection("users")
                    .whereEqualTo("username", username)
                    .whereEqualTo("password", password)
                    .get()
                    .addOnCompleteListener{task ->
                        if(task.isSuccessful) {
                            if(!task.result.isEmpty) {
                                Toast.makeText(this, "Successfully signed in", Toast.LENGTH_SHORT).show()
                                sharedProcess.edit().putString("username", username).apply()
                                val intent = Intent(this, ModSelectActivity::class.java)
                                intent.putExtra("username", username)
                                startActivity(intent)
                                finish()
                            }else {
                                Toast.makeText(this, "Invalid username or password", Toast.LENGTH_SHORT).show()
                            }
                        } else {
                            Toast.makeText(this, "Error: ${task.exception?.message}", Toast.LENGTH_SHORT).show()
                        }

                    }
            }


        }
        binding.tvForgotPassword.setOnClickListener{

        }
        binding.tvSignUp.setOnClickListener{
            val intent = Intent(this, SignUpActivity::class.java)
            startActivity(intent)
            finish()
        }
    }

}
package com.gurkantngl.wordgame.ui

import android.content.Intent
import android.os.Bundle
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.google.firebase.Firebase
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.firestore
import com.gurkantngl.wordgame.databinding.ActivitySignUpBinding

class SignUpActivity : AppCompatActivity() {

    private lateinit var binding:ActivitySignUpBinding
    private var db = Firebase.firestore

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        binding = ActivitySignUpBinding.inflate(layoutInflater)
        setContentView(binding.root)


        initUI()
    }

    private fun initUI(){
        binding.btnSignup.setOnClickListener{
            val username = binding.etUsernameSignup.text.toString().trim()
            val email = binding.etEmailSignup.text.toString().trim()
            val password = binding.etPasswordSignup.text.toString().trim()
            val confirmpass = binding.etConfirmPassSignup.text.toString()

            if (username.isNotEmpty() && email.isNotEmpty() && password.isNotEmpty() && confirmpass.isNotEmpty()) {
                if (password == confirmpass){
                    val userMap = hashMapOf(
                        "username" to username,
                        "email" to email,
                        "password" to password
                    )

                    db.collection("users").document().set(userMap)
                        .addOnSuccessListener {
                            Toast.makeText(this, "User Added Successfully", Toast.LENGTH_SHORT).show()
                            val intent = Intent(this, SignInActivity::class.java)
                            startActivity(intent)
                        }
                        .addOnFailureListener {
                            Toast.makeText(this, "Error Adding User", Toast.LENGTH_SHORT).show()
                        }
                }else{
                    Toast.makeText(this, "Password is not matching", Toast.LENGTH_SHORT).show()
                }
            }else {
                    Toast.makeText(this,"Empty Fields Are not Allowed !!!", Toast.LENGTH_SHORT).show()
            }
        }

        binding.tvSignIn.setOnClickListener{
            val intent = Intent(this, SignInActivity::class.java)
            startActivity(intent)
            finish()
        }

    }
}
package com.gurkantngl.wordgame.ui

import android.graphics.PorterDuff
import android.os.Bundle
import android.text.Editable
import android.text.InputType
import android.text.TextWatcher
import android.view.inputmethod.EditorInfo
import android.widget.EditText
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.ValueEventListener
import com.google.firebase.database.ktx.database
import com.google.firebase.ktx.Firebase
import com.gurkantngl.wordgame.R
import com.gurkantngl.wordgame.databinding.ActivityFiveGameBinding
import com.gurkantngl.wordgame.databinding.ActivitySixGameBinding

class SixGameActivity : AppCompatActivity() {

    private lateinit var binding: ActivitySixGameBinding
    private val db = Firebase.database.reference


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        binding = ActivitySixGameBinding.inflate(layoutInflater)
        setContentView(binding.root)
        initUI()
    }
    private fun initUI() {
        var username = intent.getStringExtra("username")
        var mod = intent.getIntExtra("mod", 0)
        setEditTexts(0)
    }
    private fun setEditTexts(hak:Int){
        var textList1 = listOf<EditText>(
            binding.et611, binding.et612, binding.et613, binding.et614, binding.et615, binding.et616
        )
        var textList2 = listOf<EditText>(
            binding.et621, binding.et622, binding.et623, binding.et624, binding.et625, binding.et626
        )
        var textList3 = listOf<EditText>(
            binding.et631, binding.et632, binding.et633, binding.et634, binding.et635, binding.et636
        )
        var textList4 = listOf<EditText>(
            binding.et641, binding.et642, binding.et643, binding.et644, binding.et645, binding.et646
        )
        var textList5 = listOf<EditText>(
            binding.et651, binding.et652, binding.et653, binding.et654, binding.et655, binding.et656
        )
        var textList6 = listOf<EditText>(
            binding.et661, binding.et662, binding.et663, binding.et664, binding.et665, binding.et666
        )
        if (hak == 0) {
            editOff(textList2)
            editOff(textList3)
            editOff(textList4)
            editOff(textList5)
            editOff(textList6)
            word(textList1, hak)
        } else if (hak == 1) {
            editOff(textList1)
            editOff(textList3)
            editOff(textList4)
            editOff(textList5)
            editOff(textList6)
            word(textList2, hak)
        } else if (hak == 2) {
            editOff(textList1)
            editOff(textList2)
            editOff(textList4)
            editOff(textList5)
            editOff(textList6)
            word(textList3, hak)
        } else if (hak == 3) {
            editOff(textList1)
            editOff(textList2)
            editOff(textList3)
            editOff(textList5)
            editOff(textList6)
            word(textList4, hak)
        } else if (hak == 4) {
            editOff(textList1)
            editOff(textList2)
            editOff(textList3)
            editOff(textList4)
            editOff(textList6)
            word(textList5, hak)
        } else if (hak == 5) {
            editOff(textList1)
            editOff(textList2)
            editOff(textList3)
            editOff(textList4)
            editOff(textList5)
            word(textList6, hak)
        }
    }
    private fun word(textList : List<EditText>, hak : Int) {
        var username = intent.getStringExtra("username")
        textList[textList.size-1].setOnEditorActionListener{ v, actionId, event ->
            if (actionId == EditorInfo.IME_ACTION_DONE) {
                db.child("games").addListenerForSingleValueEvent(object : ValueEventListener {
                    override fun onDataChange(dataSnapshot: DataSnapshot) {
                        for (snapshot in dataSnapshot.children) {
                            var question = ""
                            var word = ""
                            val user_1 = snapshot.child("user_1").value.toString()
                            val user_1_word = snapshot.child("user_1_word").value.toString()
                            val user_2 = snapshot.child("user_2").value.toString()
                            val user_2_word = snapshot.child("user_2_word").value.toString()
                            if (user_1 == username) {
                                question = user_2_word
                            }else {
                                question = user_1_word
                            }
                            for (editText in textList) {
                                word += editText.text.toString()
                            }
                            if (word == question) {
                                for (editText in textList) {
                                    editText.background.setColorFilter(ContextCompat.getColor(this@SixGameActivity, R.color.green), PorterDuff.Mode.SRC_IN)
                                }
                            }else {
                                for(i in 0 until textList.size) {
                                    val indices = mutableListOf<Int>()
                                    for ((index, value) in question.withIndex()) {
                                        if (value.toString() == textList[i].text.toString()) {
                                            indices.add(index)
                                        }
                                    }
                                    if (indices.contains(i)) {
                                        textList[i].background.setColorFilter(
                                            ContextCompat.getColor(
                                                this@SixGameActivity,
                                                R.color.green
                                            ), PorterDuff.Mode.SRC_IN
                                        )
                                    } else if (question.contains((textList[i].text.toString())) && !indices.contains(i)) {
                                        textList[i].background.setColorFilter(
                                            ContextCompat.getColor(
                                                this@SixGameActivity,
                                                R.color.yellow
                                            ), PorterDuff.Mode.SRC_IN
                                        )
                                    } else {
                                        textList[i].background.setColorFilter(
                                            ContextCompat.getColor(
                                                this@SixGameActivity,
                                                R.color.gray
                                            ), PorterDuff.Mode.SRC_IN
                                        )
                                    }
                                }
                            }


                        }
                    }

                    override fun onCancelled(error: DatabaseError) {
                        TODO("Not yet implemented")
                    }
                })
                setEditTexts(hak+1)
                true
            } else {
                false
            }
        }
        for (i in 0 until textList.size) {
            textList[i].setEnabled(true)
            textList[i].inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS
            textList[i].addTextChangedListener(object : TextWatcher {
                override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {
                }

                override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                }

                override fun afterTextChanged(s: Editable?) {
                    val text = s.toString()
                    if (text != text.toUpperCase()) {
                        textList[i].setText(text.toUpperCase())
                        textList[i].setSelection(text.length)
                    }
                    s?.let {
                        if (it.length == 1 && i < textList.size - 1) {
                            textList[i+1].requestFocus()
                        }else if (it.length == 0 && i > 0) {
                            textList[i-1].requestFocus()
                        }else {
                            // Do nothing
                        }
                    }
                }
            })
        }
    }

    private fun editOff(textList : List<EditText>) {
        for (i in 0 until textList.size) {
            textList[i].setEnabled(false)
        }
    }
}
package com.gurkantngl.wordgame.ui

import android.content.Intent
import android.os.Bundle
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import com.google.firebase.Firebase
import com.google.firebase.database.database
import com.gurkantngl.wordgame.R
import com.gurkantngl.wordgame.databinding.ActivityWinner1Binding

class Winner1Activity : AppCompatActivity() {
    private lateinit var binding: ActivityWinner1Binding
    private val db = Firebase.database.reference

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityWinner1Binding.inflate(layoutInflater)
        enableEdgeToEdge()
        setContentView(binding.root)
        initUI()
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }
    }
    private fun initUI() {
        val winner = intent.getStringExtra("winner")
        val username = intent.getStringExtra("username")
        binding.txtWinner.text = "Kazanan Oyuncu: $winner"
        binding.btnWinner.setOnClickListener{
            val intent = Intent(this, ModSelectActivity::class.java)
            intent.putExtra("username", username)
            startActivity(intent)
        }
    }
}
